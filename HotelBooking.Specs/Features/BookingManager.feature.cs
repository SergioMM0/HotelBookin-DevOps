// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HotelBooking.Specs.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreateBookingFeature : object, Xunit.IClassFixture<CreateBookingFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BookingManager.feature"
#line hidden
        
        public CreateBookingFeature(CreateBookingFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Create Booking", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Booking with start date <start_date> and end date <end_date> before occupied rang" +
            "e")]
        [Xunit.TraitAttribute("FeatureTitle", "Create Booking")]
        [Xunit.TraitAttribute("Description", "Booking with start date <start_date> and end date <end_date> before occupied rang" +
            "e")]
        [Xunit.InlineDataAttribute("tomorrow", "2 days after the start date", new string[0])]
        [Xunit.InlineDataAttribute("3 days from now", "1 day after the start date", new string[0])]
        [Xunit.InlineDataAttribute("2 days from now", "1 day after the start date", new string[0])]
        [Xunit.InlineDataAttribute("2 days from now", "4 days from now", new string[0])]
        public async System.Threading.Tasks.Task BookingWithStartDateStart_DateAndEndDateEnd_DateBeforeOccupiedRange(string start_Date, string end_Date, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("start_date", start_Date);
            argumentsOfScenario.Add("end_date", end_Date);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Booking with start date <start_date> and end date <end_date> before occupied rang" +
                    "e", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
    await testRunner.GivenAsync("the hotel has 1 rooms available", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 6
    await testRunner.AndAsync("there is an occupied range of dates in the booking system from \"5 days from now\" " +
                        "to \"10 days from now\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 7
    await testRunner.AndAsync(string.Format("the booking start date is \"{0}\"", start_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 8
    await testRunner.AndAsync(string.Format("the booking end date is \"{0}\"", end_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 9
    await testRunner.WhenAsync("I try to create a booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
    await testRunner.ThenAsync("the booking should be created successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Booking with start date <start_date> and end date <end_date> after occupied range" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "Create Booking")]
        [Xunit.TraitAttribute("Description", "Booking with start date <start_date> and end date <end_date> after occupied range" +
            "")]
        [Xunit.InlineDataAttribute("11 days from now", "15 days from now", new string[0])]
        [Xunit.InlineDataAttribute("2 days before the end of time", "1 day before the end of time", new string[0])]
        [Xunit.InlineDataAttribute("1 day after the occupied range", "1 day after the start date", new string[0])]
        [Xunit.InlineDataAttribute("5 day after the occupied range", "1 day before the end of time", new string[0])]
        public async System.Threading.Tasks.Task BookingWithStartDateStart_DateAndEndDateEnd_DateAfterOccupiedRange(string start_Date, string end_Date, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("start_date", start_Date);
            argumentsOfScenario.Add("end_date", end_Date);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Booking with start date <start_date> and end date <end_date> after occupied range" +
                    "", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 22
    await testRunner.GivenAsync("the hotel has 1 rooms available", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 23
    await testRunner.AndAsync("there is an occupied range of dates in the booking system from \"5 days from now\" " +
                        "to \"10 days from now\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
    await testRunner.AndAsync(string.Format("the booking start date is \"{0}\"", start_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
    await testRunner.AndAsync(string.Format("the booking end date is \"{0}\"", end_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
    await testRunner.WhenAsync("I try to create a booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
    await testRunner.ThenAsync("the booking should be created successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Start date available, end date occupied")]
        [Xunit.TraitAttribute("FeatureTitle", "Create Booking")]
        [Xunit.TraitAttribute("Description", "Start date available, end date occupied")]
        [Xunit.InlineDataAttribute("today", "2 days from now", "tomorrow", "3 days from now", new string[0])]
        [Xunit.InlineDataAttribute("today", "5 days from now", "tomorrow", "4 days from now", new string[0])]
        [Xunit.InlineDataAttribute("2 days from now", "5 days from now", "3 days from now", "6 days from now", new string[0])]
        public async System.Threading.Tasks.Task StartDateAvailableEndDateOccupied(string occupied_Start_Date, string occupied_End_Date, string start_Date, string end_Date, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("occupied_start_date", occupied_Start_Date);
            argumentsOfScenario.Add("occupied_end_date", occupied_End_Date);
            argumentsOfScenario.Add("start_date", start_Date);
            argumentsOfScenario.Add("end_date", end_Date);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Start date available, end date occupied", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 38
    await testRunner.GivenAsync("the hotel has 1 rooms available", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 39
    await testRunner.AndAsync(string.Format("there is an occupied range of dates in the booking system from \"{0}\" to \"{1}\"", occupied_Start_Date, occupied_End_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
    await testRunner.AndAsync(string.Format("the booking start date is \"{0}\"", start_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 41
    await testRunner.AndAsync(string.Format("the booking end date is \"{0}\"", end_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 42
    await testRunner.WhenAsync("I try to create a booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 43
    await testRunner.ThenAsync("the booking should fail to be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Start date before occupied, end date within occupied")]
        [Xunit.TraitAttribute("FeatureTitle", "Create Booking")]
        [Xunit.TraitAttribute("Description", "Start date before occupied, end date within occupied")]
        [Xunit.InlineDataAttribute("tomorrow", "3 days from now", "today", "2 days from now", new string[0])]
        [Xunit.InlineDataAttribute("today", "4 days from now", "yesterday", "2 days from now", new string[0])]
        [Xunit.InlineDataAttribute("2 days from now", "5 days from now", "tomorrow", "4 days from now", new string[0])]
        public async System.Threading.Tasks.Task StartDateBeforeOccupiedEndDateWithinOccupied(string occupied_Start_Date, string occupied_End_Date, string start_Date, string end_Date, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("occupied_start_date", occupied_Start_Date);
            argumentsOfScenario.Add("occupied_end_date", occupied_End_Date);
            argumentsOfScenario.Add("start_date", start_Date);
            argumentsOfScenario.Add("end_date", end_Date);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Start date before occupied, end date within occupied", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 53
    await testRunner.GivenAsync("the hotel has 1 rooms available", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 54
    await testRunner.AndAsync(string.Format("there is an occupied range of dates in the booking system from \"{0}\" to \"{1}\"", occupied_Start_Date, occupied_End_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 55
    await testRunner.AndAsync(string.Format("the booking start date is \"{0}\"", start_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 56
    await testRunner.AndAsync(string.Format("the booking end date is \"{0}\"", end_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
    await testRunner.WhenAsync("I try to create a booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 58
    await testRunner.ThenAsync("the booking should fail to be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Start date within occupied, end date after occupied")]
        [Xunit.TraitAttribute("FeatureTitle", "Create Booking")]
        [Xunit.TraitAttribute("Description", "Start date within occupied, end date after occupied")]
        [Xunit.InlineDataAttribute("today", "2 days from now", "tomorrow", "3 days from now", new string[0])]
        [Xunit.InlineDataAttribute("tomorrow", "4 days from now", "2 days from now", "5 days from now", new string[0])]
        [Xunit.InlineDataAttribute("2 days from now", "5 days from now", "3 days from now", "6 days from now", new string[0])]
        public async System.Threading.Tasks.Task StartDateWithinOccupiedEndDateAfterOccupied(string occupied_Start_Date, string occupied_End_Date, string start_Date, string end_Date, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("occupied_start_date", occupied_Start_Date);
            argumentsOfScenario.Add("occupied_end_date", occupied_End_Date);
            argumentsOfScenario.Add("start_date", start_Date);
            argumentsOfScenario.Add("end_date", end_Date);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Start date within occupied, end date after occupied", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 67
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 68
    await testRunner.GivenAsync("the hotel has 1 rooms available", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 69
    await testRunner.AndAsync(string.Format("there is an occupied range of dates in the booking system from \"{0}\" to \"{1}\"", occupied_Start_Date, occupied_End_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 70
    await testRunner.AndAsync(string.Format("the booking start date is \"{0}\"", start_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 71
    await testRunner.AndAsync(string.Format("the booking end date is \"{0}\"", end_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 72
    await testRunner.WhenAsync("I try to create a booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 73
    await testRunner.ThenAsync("the booking should fail to be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Start date occupied, end date available")]
        [Xunit.TraitAttribute("FeatureTitle", "Create Booking")]
        [Xunit.TraitAttribute("Description", "Start date occupied, end date available")]
        [Xunit.InlineDataAttribute("tomorrow", "3 days from now", "today", "2 days from now", new string[0])]
        [Xunit.InlineDataAttribute("today", "4 days from now", "tomorrow", "5 days from now", new string[0])]
        [Xunit.InlineDataAttribute("2 days from now", "5 days from now", "3 days from now", "6 days from now", new string[0])]
        public async System.Threading.Tasks.Task StartDateOccupiedEndDateAvailable(string occupied_Start_Date, string occupied_End_Date, string start_Date, string end_Date, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("occupied_start_date", occupied_Start_Date);
            argumentsOfScenario.Add("occupied_end_date", occupied_End_Date);
            argumentsOfScenario.Add("start_date", start_Date);
            argumentsOfScenario.Add("end_date", end_Date);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Start date occupied, end date available", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 83
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 84
    await testRunner.GivenAsync("the hotel has 1 rooms available", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 85
    await testRunner.AndAsync(string.Format("there is an occupied range of dates in the booking system from \"{0}\" to \"{1}\"", occupied_Start_Date, occupied_End_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 86
    await testRunner.AndAsync(string.Format("the booking start date is \"{0}\"", start_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 87
    await testRunner.AndAsync(string.Format("the booking end date is \"{0}\"", end_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 88
    await testRunner.WhenAsync("I try to create a booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 89
    await testRunner.ThenAsync("the booking should fail to be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Start date before occupied, end date after occupied")]
        [Xunit.TraitAttribute("FeatureTitle", "Create Booking")]
        [Xunit.TraitAttribute("Description", "Start date before occupied, end date after occupied")]
        [Xunit.InlineDataAttribute("tomorrow", "2 days from now", "today", "3 days from now", new string[0])]
        [Xunit.InlineDataAttribute("today", "3 days from now", "yesterday", "4 days from now", new string[0])]
        [Xunit.InlineDataAttribute("2 days from now", "4 days from now", "tomorrow", "5 days from now", new string[0])]
        public async System.Threading.Tasks.Task StartDateBeforeOccupiedEndDateAfterOccupied(string occupied_Start_Date, string occupied_End_Date, string start_Date, string end_Date, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("occupied_start_date", occupied_Start_Date);
            argumentsOfScenario.Add("occupied_end_date", occupied_End_Date);
            argumentsOfScenario.Add("start_date", start_Date);
            argumentsOfScenario.Add("end_date", end_Date);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Start date before occupied, end date after occupied", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 111
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 112
    await testRunner.GivenAsync("the hotel has 1 rooms available", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 113
    await testRunner.AndAsync(string.Format("there is an occupied range of dates in the booking system from \"{0}\" to \"{1}\"", occupied_Start_Date, occupied_End_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 114
    await testRunner.AndAsync(string.Format("the booking start date is \"{0}\"", start_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 115
    await testRunner.AndAsync(string.Format("the booking end date is \"{0}\"", end_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 116
    await testRunner.WhenAsync("I try to create a booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 117
    await testRunner.ThenAsync("the booking should fail to be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Start date occupied, end date occupied")]
        [Xunit.TraitAttribute("FeatureTitle", "Create Booking")]
        [Xunit.TraitAttribute("Description", "Start date occupied, end date occupied")]
        [Xunit.InlineDataAttribute("tomorrow", "3 days from now", "today", "2 days from now", new string[0])]
        [Xunit.InlineDataAttribute("today", "4 days from now", "tomorrow", "3 days from now", new string[0])]
        [Xunit.InlineDataAttribute("2 days from now", "5 days from now", "3 days from now", "4 days from now", new string[0])]
        public async System.Threading.Tasks.Task StartDateOccupiedEndDateOccupied(string occupied_Start_Date, string occupied_End_Date, string start_Date, string end_Date, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("occupied_start_date", occupied_Start_Date);
            argumentsOfScenario.Add("occupied_end_date", occupied_End_Date);
            argumentsOfScenario.Add("start_date", start_Date);
            argumentsOfScenario.Add("end_date", end_Date);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Start date occupied, end date occupied", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 126
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 127
    await testRunner.GivenAsync("the hotel has 1 rooms available", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 128
    await testRunner.AndAsync(string.Format("there is an occupied range of dates in the booking system from \"{0}\" to \"{1}\"", occupied_Start_Date, occupied_End_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 129
    await testRunner.AndAsync(string.Format("the booking start date is \"{0}\"", start_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 130
    await testRunner.AndAsync(string.Format("the booking end date is \"{0}\"", end_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 131
    await testRunner.WhenAsync("I try to create a booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 132
    await testRunner.ThenAsync("the booking should fail to be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Booking with start date being the same day as end date")]
        [Xunit.TraitAttribute("FeatureTitle", "Create Booking")]
        [Xunit.TraitAttribute("Description", "Booking with start date being the same day as end date")]
        [Xunit.InlineDataAttribute("today", "2 days from now", "today", "today", new string[0])]
        [Xunit.InlineDataAttribute("tomorrow", "3 days from now", "tomorrow", "tomorrow", new string[0])]
        [Xunit.InlineDataAttribute("2 days from now", "4 days from now", "3 days from now", "3 days from now", new string[0])]
        public async System.Threading.Tasks.Task BookingWithStartDateBeingTheSameDayAsEndDate(string occupied_Start_Date, string occupied_End_Date, string start_Date, string end_Date, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("occupied_start_date", occupied_Start_Date);
            argumentsOfScenario.Add("occupied_end_date", occupied_End_Date);
            argumentsOfScenario.Add("start_date", start_Date);
            argumentsOfScenario.Add("end_date", end_Date);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Booking with start date being the same day as end date", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 141
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 142
    await testRunner.GivenAsync("the hotel has 1 rooms available", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 143
    await testRunner.AndAsync(string.Format("there is an occupied range of dates in the booking system from \"{0}\" to \"{1}\"", occupied_Start_Date, occupied_End_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 144
    await testRunner.AndAsync(string.Format("the booking start date is \"{0}\"", start_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 145
    await testRunner.AndAsync(string.Format("the booking end date is \"{0}\"", end_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 146
    await testRunner.WhenAsync("I try to create a booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 147
    await testRunner.ThenAsync("the booking should fail to be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Booking with invalid date range")]
        [Xunit.TraitAttribute("FeatureTitle", "Create Booking")]
        [Xunit.TraitAttribute("Description", "Booking with invalid date range")]
        [Xunit.InlineDataAttribute("2 days from now", "tomorrow", new string[0])]
        [Xunit.InlineDataAttribute("yesterday", "tomorrow", new string[0])]
        [Xunit.InlineDataAttribute("today", "yesterday", new string[0])]
        public async System.Threading.Tasks.Task BookingWithInvalidDateRange(string start_Date, string end_Date, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("start_date", start_Date);
            argumentsOfScenario.Add("end_date", end_Date);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Booking with invalid date range", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 156
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 157
    await testRunner.GivenAsync("the hotel has 1 rooms available", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 158
    await testRunner.AndAsync(string.Format("the booking start date is \"{0}\"", start_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 159
    await testRunner.AndAsync(string.Format("the booking end date is \"{0}\"", end_Date), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 160
    await testRunner.WhenAsync("I try to create a booking", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 161
    await testRunner.ThenAsync("the booking should fail to be created", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CreateBookingFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CreateBookingFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
